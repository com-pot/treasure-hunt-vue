@use "sass:map";
@use "sass:math";

$accents: (
        primary: hsl(240, 85%, 50%),
        secondary: hsl(30, 65%, 40%),
        success: hsl(160, 80%, 56%),
        danger: hsl(0, 80%, 56%),

        vivid: hsl(66, 100%, 50%),
        vile: rgb(76, 175, 80),
);
$accentSteps: (
  primary: 10,
  neutral: 10,
);

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: math.div($value, 255);

    @if $value < 0.03928 {
      $value: math.div($value, 12.92);
    } @else {
      $value: math.div($value + .055,  1.055);
      $value: math.pow($value, 2.4);
    }

    $colors: map.merge($colors, ($name: $value));
  }

  @return (map.get($colors, 'red') * .2126) + (map.get($colors, 'green') * .7152) + (map.get($colors, 'blue') * .0722);
}
@function getContrastingColor($color) {
  @if (luminance($color) < 0.5) {
      @return #FFF;
  }

  @return #000;
}

body.theme-fw {
  background: var(--neutral-950);
  color: var(--neutral-50);
}

.theme-fw {
  --bg-hsl: 90deg 60% 85%;
  --container-bg: hsl(var(--bg-hsl) / 0.75);

  --nav-bg: hsl(var(--bg-hsl));
  --nav-border-color: var(--hsl-primary);
  
  @each $name, $color in $accents {
    // TODO: rename to --color-#{$name}-hsl
    --hsl-#{$name}-components: #{hue($color)} #{saturation($color)} #{lightness($color)};
    // TODO: rename to --color-#{$name}
    --hsl-#{$name}: hsl(var(--hsl-#{$name}-components));
    --color-#{$name}-contrast: #{getContrastingColor($color)};
  }

  .root-container {
    position: relative; // To enable z-index manipulation
    z-index: 2;
    border-radius: 0.5rem;
    background: var(--container-bg);
    box-shadow: 0 0 0.25rem 0 var(--hsl-primary);

    transition: all 0.5s ease;

    &[data-skin="entrance"] {
      --container-bg: #{hsla(42, 20%, 60%, 0.2)};

      + .bg {
        filter: opacity(0.2) saturate(0.2);

        .cloud {
          opacity: 0;
        }
      }
    }
  }

  .bg {
    z-index: 1;
    background: hsl(var(--bg-hsl) / 0.4);
    pointer-events: none;
    

    filter: brightness(1.25);
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;

    &::after {
      content: '';
      display: block;
      position: absolute;
      inset: 0;

      background-image: url("./assets/wallpaperflare.com_wallpaper.jpg");
      background-size: cover;
      background-attachment: fixed;
      filter: opacity(0.1);
    }
  }
}

@each $name, $color in $accents {
  .-acc-#{$name} {
    --acc-color: var(--hsl-#{$name});
    --acc-color-contrast: var(--color-#{$name}-contrast);
  }
}

button {
  color: var(--neutral-50);
}
